// Generated by CoffeeScript 2.0.1
(function() {
  "use strict";
  var BuiltinScope, Scope, globals,
    hasProp = {}.hasOwnProperty,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  globals = require("globals");

  // support Cakefile
  globals.cake = {
    task: false,
    option: false,
    invoke: false
  };

  Scope = require("./Scope");

  module.exports = BuiltinScope = class BuiltinScope extends Scope {
    constructor(envs = [], custom = {}) {
      var env, i, len, name;
      super(null, null);
      this.getScopeOf = this.getScopeOf.bind(this);
      // argument handling
      custom["this"] = false; // `this` is always read-only
      if (typeof envs === "string") {
        envs = [envs];
      }
      envs = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = envs.length; i < len; i++) {
          env = envs[i];
          results.push(globals[env]);
        }
        return results;
      })();
      envs.push(custom);
      // populate builtin symbol table
      for (i = 0, len = envs.length; i < len; i++) {
        env = envs[i];
        for (name in env) {
          if (!hasProp.call(env, name)) continue;
          this.local(name).type = "Builtin";
        }
      }
      void 0;
    }

    getScopeOf(name) {
      boundMethodCheck(this, BuiltinScope);
      if (this.symbols[name] != null) {
        return this;
      } else {
        return null; // no parent
      }
    }

  };

}).call(this);
